import torch
import torch.nn as nn
from torchvision import models, transforms

class_names = ['Afghan_hound',
 'African_hunting_dog',
 'Airedale',
 'American_Staffordshire_terrier',
 'Appenzeller',
 'Australian_terrier',
 'Bedlington_terrier',
 'Bernese_mountain_dog',
 'Blenheim_spaniel',
 'Border_collie',
 'Border_terrier',
 'Boston_bull',
 'Bouvier_des_Flandres',
 'Brabancon_griffon',
 'Brittany_spaniel',
 'Cardigan',
 'Chesapeake_Bay_retriever',
 'Chihuahua',
 'Dandie_Dinmont',
 'Doberman',
 'English_foxhound',
 'English_setter',
 'English_springer',
 'EntleBucher',
 'Eskimo_dog',
 'French_bulldog',
 'German_shepherd',
 'German_short-haired_pointer',
 'Gordon_setter',
 'Great_Dane',
 'Great_Pyrenees',
 'Greater_Swiss_Mountain_dog',
 'Ibizan_hound',
 'Irish_setter',
 'Irish_terrier',
 'Irish_water_spaniel',
 'Irish_wolfhound',
 'Italian_greyhound',
 'Japanese_spaniel',
 'Kerry_blue_terrier',
 'Labrador_retriever',
 'Lakeland_terrier',
 'Leonberg',
 'Lhasa',
 'Maltese_dog',
 'Mexican_hairless',
 'Newfoundland',
 'Norfolk_terrier',
 'Norwegian_elkhound',
 'Norwich_terrier',
 'Old_English_sheepdog',
 'Pekinese',
 'Pembroke',
 'Pomeranian',
 'Rhodesian_ridgeback',
 'Rottweiler',
 'Saint_Bernard',
 'Saluki',
 'Samoyed',
 'Scotch_terrier',
 'Scottish_deerhound',
 'Sealyham_terrier',
 'Shetland_sheepdog',
 'Shih-Tzu',
 'Siberian_husky',
 'Staffordshire_bullterrier',
 'Sussex_spaniel',
 'Tibetan_mastiff',
 'Tibetan_terrier',
 'Walker_hound',
 'Weimaraner',
 'Welsh_springer_spaniel',
 'West_Highland_white_terrier',
 'Yorkshire_terrier',
 'affenpinscher',
 'basenji',
 'basset',
 'beagle',
 'black-and-tan_coonhound',
 'bloodhound',
 'bluetick',
 'borzoi',
 'boxer',
 'briard',
 'bull_mastiff',
 'cairn',
 'chow',
 'clumber',
 'cocker_spaniel',
 'collie',
 'curly-coated_retriever',
 'dhole',
 'dingo',
 'flat-coated_retriever',
 'giant_schnauzer',
 'golden_retriever',
 'groenendael',
 'keeshond',
 'kelpie',
 'komondor',
 'kuvasz',
 'malamute',
 'malinois',
 'miniature_pinscher',
 'miniature_poodle',
 'miniature_schnauzer',
 'otterhound',
 'papillon',
 'pug',
 'redbone',
 'schipperke',
 'silky_terrier',
 'soft-coated_wheaten_terrier',
 'standard_poodle',
 'standard_schnauzer',
 'toy_poodle',
 'toy_terrier',
 'vizsla',
 'whippet',
 'wire-haired_fox_terrier']

IMG_MEAN = [0.485, 0.456, 0.406]
IMG_STD = [0.229, 0.224, 0.225]

def predict(path):
    model_ft = models.resnet18(pretrained=True)
    num_ftrs = model_ft.fc.in_features
    model_ft.fc = nn.Linear(num_ftrs, len(class_names))
    param = torch.load("breeds.pth", map_location=torch.device('cpu'))
    model_ft.load_state_dict(param)
    transform = transforms.Compose([transforms.Resize(300), transforms.ToTensor(),transforms.Normalize(IMG_MEAN, IMG_STD)])
    inputs = transform(path)
    input = torch.unsqueeze(inputs, 0)
    model_ft.eval()
    outputs = model_ft(input)
    _, preds = torch.max(outputs.data, 1)
    return class_names[preds]